version: '3.9'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: launchkit-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: launchkit
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis (for rate limiting, queues, caching)
  redis:
    image: redis:7-alpine
    container_name: launchkit-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # OpenTelemetry Collector (for observability)
  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: launchkit-otel
    restart: unless-stopped
    command: ['--config=/etc/otel-collector-config.yaml']
    volumes:
      - ./ops/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - '4317:4317' # OTLP gRPC
      - '4318:4318' # OTLP HTTP
      - '8888:8888' # Prometheus metrics
      - '8889:8889' # Prometheus exporter

  # Prometheus (metrics storage)
  prometheus:
    image: prom/prometheus:latest
    container_name: launchkit-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    volumes:
      - ./ops/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - '9090:9090'

  # Grafana (metrics visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: launchkit-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./ops/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./ops/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - '3003:3000'
    depends_on:
      - prometheus

  # Stripe CLI (for local webhook testing)
  stripe-cli:
    image: stripe/stripe-cli:latest
    container_name: launchkit-stripe-cli
    restart: unless-stopped
    command: listen --forward-to host.docker.internal:3001/webhooks/stripe
    environment:
      - STRIPE_API_KEY=${STRIPE_SECRET_KEY}
    network_mode: host

  # LocalStack (for S3 local development)
  localstack:
    image: localstack/localstack:latest
    container_name: launchkit-localstack
    restart: unless-stopped
    environment:
      - SERVICES=s3
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
    ports:
      - '4566:4566'
      - '4571:4571'
    volumes:
      - localstack_data:/tmp/localstack

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  localstack_data:

